openapi: '3.0.2'
info:
  title: Ecommerce Lama
  version: '1.0'
servers:
  - url: http://localhost:5000/api
    description: Local Development Server
tags:
  - name: Auth
    description: Register/Login endpoint
  - name: Users
    description: User endpoint
  - name: Products
    description: Product endpoint
  - name: Cart
    description: Cart endpoint

paths:
  /test:
    get:
      summary: Test
      responses:
        "200":
          description: "Hello World"
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  format: text
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: OK
  /auth/login:
    post:
      tags: [Auth]
      description: Login
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginPayload'
      responses:
        '200':
          description: The request return token.
          content:
            application/json:
              schema: 
                type: string
  /carts:
    get:
      tags: [Cart]
      description: 'Get all Carts'
      security:
        - userAuth : []
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
    post:
      tags: [Cart]
      description: 'Create a new cart'
      security:
        - adminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
  /carts/{id}:
    get:
      tags: [Cart]
      description: 'Get a cart'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

    put:  
      tags: [Cart]
      description: 'Update a cart'
      security:
      - adminAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        '200':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

    delete:
      tags: [Cart]
      description: 'Delete a cart'
      security:
      - adminAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
  /products:
    get:
      tags: [Product]
      description: 'Get all Products'
      security:
        - adminAuth : []
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    post:
      tags: [Product]
      description: 'Create a new Product'
      security:
        - adminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /products/{id}:
    get:
      tags: [Product]
      description: 'Get a Product'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

    put:  
      tags: [Product]
      description: 'Update a Product'
      security:
      - adminAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

    delete:
      tags: [Product]
      description: 'Delete a Product'
      security:
      - adminAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  
components:
  schemas:
    LoginPayload:
      type: object
      properties:
        username:
          type: string
          format: text
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - username
        - email
        - password
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
    Cart:
      type: object
      properties:
        userId: 
          type: string
        products:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: number
                default: 1 
      required:
        - userId
    Product:
      type: object
      properties:
        title: 
          type: string
        desc: 
          type: string
        img:  
          type: string
        categories: 
          type: array
        size:
          type: string
        color: 
          type: string
        price:
          type: number

      required:
        - title
        - desc
        - img
        - price
   
          
  securitySchemes:
    adminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer authentication
    userAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer authentication

    